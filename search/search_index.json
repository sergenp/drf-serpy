{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home drf_serpy documentation This project is a fork of and improved version of serpy for Django Rest Framework This project depends on drf-yasg for openapi documentation creation, that's why it also requires whatever drf-yasg requires, which is basically Django and DRF.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#drf_serpy-documentation","text":"This project is a fork of and improved version of serpy for Django Rest Framework This project depends on drf-yasg for openapi documentation creation, that's why it also requires whatever drf-yasg requires, which is basically Django and DRF.","title":"drf_serpy documentation"},{"location":"custom-fields/","text":"Custom Fields The most common way to create a custom field with drf_serpy is to override drf_serpy.Field.to_value . This method is called on the value retrieved from the object being serialized. For example, to create a field that adds 5 to every value it serializes, do: class Add5Field(drf_serpy.Field): def to_value(self, value): return value + 5 Then to use it: class Obj(object): pass class ObjSerializer(drf_serpy.Serializer): foo = Add5Field() f = Obj() f.foo = 9 ObjSerializer(f).data # {'foo': 14} Another use for custom fields is data validation. For example, to validate that every serialized value has a '.' in it: class ValidateDotField(drf_serpy.Field): def to_value(self, value): if '.' not in value: raise ValidationError('no dot!') return value For more control over the behavior of the field, override drf_serpy.Field.as_getter . When the drf_serpy.Serializer class is created, each field will be compiled to a getter, that will be called to get its associated attribute from the object. For an example of this, see the drf_serpy.MethodField implementation.","title":"Custom Fields"},{"location":"custom-fields/#custom-fields","text":"The most common way to create a custom field with drf_serpy is to override drf_serpy.Field.to_value . This method is called on the value retrieved from the object being serialized. For example, to create a field that adds 5 to every value it serializes, do: class Add5Field(drf_serpy.Field): def to_value(self, value): return value + 5 Then to use it: class Obj(object): pass class ObjSerializer(drf_serpy.Serializer): foo = Add5Field() f = Obj() f.foo = 9 ObjSerializer(f).data # {'foo': 14} Another use for custom fields is data validation. For example, to validate that every serialized value has a '.' in it: class ValidateDotField(drf_serpy.Field): def to_value(self, value): if '.' not in value: raise ValidationError('no dot!') return value For more control over the behavior of the field, override drf_serpy.Field.as_getter . When the drf_serpy.Serializer class is created, each field will be compiled to a getter, that will be called to get its associated attribute from the object. For an example of this, see the drf_serpy.MethodField implementation.","title":"Custom Fields"},{"location":"performance/","text":"Performance Benchmarks serpy (not drf-serpy its benchmarks will be added soon) was compared against two other popular serializer frameworks: marshmallow Django Rest Framework Serializers These graphs show the results. The benchmark scripts are found in the benchmarks directory in the drf_serpy GitHub repository . Run these benchmarks yourself with: $ git clone https://github.com/sergenp/drf-serpy.git drf_serpy && cd drf_serpy $ python benchmarks/bm_complex.py $ python benchmarks/bm_simple.py Results Note these benchmarks are for serpy not for drf_serpy , new benchmarks are going to be uploaded soon. These benchmarks were run on a Lenovo T530 with a 2-core 2.5 GHz i5 processor and 8G of memory. Simple Benchmark This benchmark serializes simple objects that have a single field. Complex Benchmark This benchmark serializes nested objects with multiple fields of different types.","title":"Performance"},{"location":"performance/#performance-benchmarks","text":"serpy (not drf-serpy its benchmarks will be added soon) was compared against two other popular serializer frameworks: marshmallow Django Rest Framework Serializers These graphs show the results. The benchmark scripts are found in the benchmarks directory in the drf_serpy GitHub repository . Run these benchmarks yourself with: $ git clone https://github.com/sergenp/drf-serpy.git drf_serpy && cd drf_serpy $ python benchmarks/bm_complex.py $ python benchmarks/bm_simple.py","title":"Performance Benchmarks"},{"location":"performance/#results","text":"Note these benchmarks are for serpy not for drf_serpy , new benchmarks are going to be uploaded soon. These benchmarks were run on a Lenovo T530 with a 2-core 2.5 GHz i5 processor and 8G of memory.","title":"Results"},{"location":"performance/#simple-benchmark","text":"This benchmark serializes simple objects that have a single field.","title":"Simple Benchmark"},{"location":"performance/#complex-benchmark","text":"This benchmark serializes nested objects with multiple fields of different types.","title":"Complex Benchmark"},{"location":"swagger_gen/","text":"Swagger Generation Example Example is available in test_django_app, you can run the app after cloning the project. python test_django_app/manage.py runserver Swagger Generation Note that the swagger generation is for drf_serpy.Serializer and doesn't care about the inputted model. i.e. the openapi.Schema will be generated based on the serializer attributes. import drf_serpy as serpy from drf_yasg.utils import swagger_auto_schema from rest_framework import status from rest_framework.response import Response from rest_framework.viewsets import ModelViewSet from .models import Post from .serializers import drf, serps # serps.ReadOnlyPostSerializer is this: # class ReadOnlyPostSerializer(serpy.Serializer): # \"\"\" # Sample description to be used in schema # \"\"\" # id = serpy.IntField() # author = UserSerializer() # title = serpy.StrField() # content = serpy.StrField() # image = serpy.ImageField() # tags = TagSerializer(many=True) # created = serpy.DateTimeField() # updated = serpy.DateTimeField() # dummy = serpy.MethodField() # is_completed = serpy.MethodField() # def get_dummy(self, value) -> List[int]: # return list(range(1, 10)) # # typing is necessary to create schema, otherwise this will throw an assertion error # def get_is_completed(self, value) -> bool: # return True class PostViewSet(ModelViewSet): queryset = Post.objects.all() serializer_class = drf.PostSerializer @swagger_auto_schema( responses={ 200: ReadOnlyPostSerializer.to_schema(many=True), }, ) def list(self, request, *args, **kwargs): # get your objects serializer = serps.ReadOnlyPostSerializer(instance=self.queryset.all(), many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) Generated Swagger: Generic serializer swagger generation # class CommentSerializer(drf_serpy.Serializer): # id = drf_serpy.IntField() # user = UserSerializer() # post = ReadOnlyPostSerializer() # comment = drf_serpy.StrField() # created = drf_serpy.DateTimeField() # updated = drf_serpy.DateTimeField() # class LinkSerializer(drf_serpy.Serializer): # next = drf_serpy.StrField() # previous = drf_serpy.StrField() # class PaginationSerializer(drf_serpy.Serializer): # links = LinkSerializer() # count = drf_serpy.IntField() # current_page = drf_serpy.IntField() # page_size = drf_serpy.IntField() # results = drf_serpy.Serializer() class CommentViewSet(ModelViewSet): queryset = Comment.objects.all() serializer_class = drf.CommentSerializer @swagger_auto_schema( responses={ 200: PaginationSerializer.to_schema(serializer=CommentSerializer(many=True)), }, ) def list(self, request, *args, **kwargs): self.serializer_class = serps.CommentSerializer return super().list(request, *args, **kwargs) Generated Swagger:","title":"Swagger Generation Example"},{"location":"swagger_gen/#swagger-generation-example","text":"Example is available in test_django_app, you can run the app after cloning the project. python test_django_app/manage.py runserver","title":"Swagger Generation Example"},{"location":"swagger_gen/#swagger-generation","text":"Note that the swagger generation is for drf_serpy.Serializer and doesn't care about the inputted model. i.e. the openapi.Schema will be generated based on the serializer attributes. import drf_serpy as serpy from drf_yasg.utils import swagger_auto_schema from rest_framework import status from rest_framework.response import Response from rest_framework.viewsets import ModelViewSet from .models import Post from .serializers import drf, serps # serps.ReadOnlyPostSerializer is this: # class ReadOnlyPostSerializer(serpy.Serializer): # \"\"\" # Sample description to be used in schema # \"\"\" # id = serpy.IntField() # author = UserSerializer() # title = serpy.StrField() # content = serpy.StrField() # image = serpy.ImageField() # tags = TagSerializer(many=True) # created = serpy.DateTimeField() # updated = serpy.DateTimeField() # dummy = serpy.MethodField() # is_completed = serpy.MethodField() # def get_dummy(self, value) -> List[int]: # return list(range(1, 10)) # # typing is necessary to create schema, otherwise this will throw an assertion error # def get_is_completed(self, value) -> bool: # return True class PostViewSet(ModelViewSet): queryset = Post.objects.all() serializer_class = drf.PostSerializer @swagger_auto_schema( responses={ 200: ReadOnlyPostSerializer.to_schema(many=True), }, ) def list(self, request, *args, **kwargs): # get your objects serializer = serps.ReadOnlyPostSerializer(instance=self.queryset.all(), many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) Generated Swagger:","title":"Swagger Generation"},{"location":"swagger_gen/#generic-serializer-swagger-generation","text":"# class CommentSerializer(drf_serpy.Serializer): # id = drf_serpy.IntField() # user = UserSerializer() # post = ReadOnlyPostSerializer() # comment = drf_serpy.StrField() # created = drf_serpy.DateTimeField() # updated = drf_serpy.DateTimeField() # class LinkSerializer(drf_serpy.Serializer): # next = drf_serpy.StrField() # previous = drf_serpy.StrField() # class PaginationSerializer(drf_serpy.Serializer): # links = LinkSerializer() # count = drf_serpy.IntField() # current_page = drf_serpy.IntField() # page_size = drf_serpy.IntField() # results = drf_serpy.Serializer() class CommentViewSet(ModelViewSet): queryset = Comment.objects.all() serializer_class = drf.CommentSerializer @swagger_auto_schema( responses={ 200: PaginationSerializer.to_schema(serializer=CommentSerializer(many=True)), }, ) def list(self, request, *args, **kwargs): self.serializer_class = serps.CommentSerializer return super().list(request, *args, **kwargs) Generated Swagger:","title":"Generic serializer swagger generation"},{"location":"api_reference/drf_fields/","text":"drf_serpy.Fields drf_serpy.Fields Field Objects getter_takes_serializer to_value as_getter get_schema StrField Objects IntField Objects FloatField Objects BoolField Objects MethodField Objects ImageField Objects ListField Objects to_value DateField Objects DateTimeField Objects Field Objects class Field(object) Arguments : attr ( str ): The attribute to get on the object, using the same format as operator.attrgetter . If this is not supplied, the name this field was assigned to on the serializer will be used. call ( bool ): Whether the value should be called after it is retrieved from the object. Useful if an object has a method to be serialized. label ( str ): A label to use as the name of the serialized field instead of using the attribute name of the field. required ( bool ): Whether the field is required. If set to False , :meth: Field.to_value will not be called if the value is None . schema_type ( openapi.Schema ): drf-yasg schema type of the Field, if None , schema type of the attribute of the Field will be used, getter_takes_serializer Set to True if the value function returned from :meth: Field.as_getter requires the serializer to be passed in as the first argument. Otherwise, the object will be the only parameter. to_value def to_value(value: Type[Any]) -> Union[dict, list, bool, str, int, float] Transform the serialized value. Override this method to clean and validate values serialized by this field. For example to implement an int field: :: def to_value(self, value): return int(value) Arguments : value : The value fetched from the object being serialized. as_getter def as_getter(serializer_field_name: str, serializer_cls: Type[\"Serializer\"]) Returns a function that fetches an attribute from an object. Return None to use the default getter for the serializer defined in Arguments : serializer_field_name ( str ): The name this field was assigned to on the serializer. serializer_cls : The Serializer this field is a part of. get_schema def get_schema() -> Union[None, openapi.Schema] get the openapi.Schema of the field Returns : Union[None, openapi.Schema]: return the openapi.Schema for the given schema_type StrField Objects class StrField(Field) A Field that converts the value to a string. IntField Objects class IntField(Field) A Field that converts the value to an integer. FloatField Objects class FloatField(Field) A Field that converts the value to a float. BoolField Objects class BoolField(Field) A Field that converts the value to a boolean. MethodField Objects class MethodField(Field) A Field that calls a method on the Serializer . This is useful if a Field needs to serialize a value that may come from multiple attributes on an object. For example: :: class FooSerializer(Serializer): plus = MethodField() minus = MethodField('do_minus') def get_plus(self, foo_obj) -> int: return foo_obj.bar + foo_obj.baz def do_minus(self, foo_obj) -> int: return foo_obj.bar - foo_obj.baz foo = Foo(bar=5, baz=10) FooSerializer(foo).data # {'plus': 15, 'minus': -5} Arguments : method ( str ): The method on the serializer to call. Defaults to 'get_<field name>' . ImageField Objects class ImageField(Field) A Field that converts the value to a image url. ListField Objects class ListField(Field) to_value def to_value(value: List[Union[Type[Any], bool, str, float, int]]) -> List[Union[str, int, bool, float]] Arguments : value ( list ): List of self.field_attrs or list of primitive types DateField Objects class DateField(Field) A Field that converts the value to a date format. DateTimeField Objects class DateTimeField(DateField) A Field that converts the value to a date time format.","title":"drf_serpy.Fields"},{"location":"api_reference/drf_fields/#drf_serpyfields","text":"drf_serpy.Fields Field Objects getter_takes_serializer to_value as_getter get_schema StrField Objects IntField Objects FloatField Objects BoolField Objects MethodField Objects ImageField Objects ListField Objects to_value DateField Objects DateTimeField Objects","title":"drf_serpy.Fields"},{"location":"api_reference/drf_fields/#field-objects","text":"class Field(object) Arguments : attr ( str ): The attribute to get on the object, using the same format as operator.attrgetter . If this is not supplied, the name this field was assigned to on the serializer will be used. call ( bool ): Whether the value should be called after it is retrieved from the object. Useful if an object has a method to be serialized. label ( str ): A label to use as the name of the serialized field instead of using the attribute name of the field. required ( bool ): Whether the field is required. If set to False , :meth: Field.to_value will not be called if the value is None . schema_type ( openapi.Schema ): drf-yasg schema type of the Field, if None , schema type of the attribute of the Field will be used,","title":"Field Objects"},{"location":"api_reference/drf_fields/#getter_takes_serializer","text":"Set to True if the value function returned from :meth: Field.as_getter requires the serializer to be passed in as the first argument. Otherwise, the object will be the only parameter.","title":"getter_takes_serializer"},{"location":"api_reference/drf_fields/#to_value","text":"def to_value(value: Type[Any]) -> Union[dict, list, bool, str, int, float] Transform the serialized value. Override this method to clean and validate values serialized by this field. For example to implement an int field: :: def to_value(self, value): return int(value) Arguments : value : The value fetched from the object being serialized.","title":"to_value"},{"location":"api_reference/drf_fields/#as_getter","text":"def as_getter(serializer_field_name: str, serializer_cls: Type[\"Serializer\"]) Returns a function that fetches an attribute from an object. Return None to use the default getter for the serializer defined in Arguments : serializer_field_name ( str ): The name this field was assigned to on the serializer. serializer_cls : The Serializer this field is a part of.","title":"as_getter"},{"location":"api_reference/drf_fields/#get_schema","text":"def get_schema() -> Union[None, openapi.Schema] get the openapi.Schema of the field Returns : Union[None, openapi.Schema]: return the openapi.Schema for the given schema_type","title":"get_schema"},{"location":"api_reference/drf_fields/#strfield-objects","text":"class StrField(Field) A Field that converts the value to a string.","title":"StrField Objects"},{"location":"api_reference/drf_fields/#intfield-objects","text":"class IntField(Field) A Field that converts the value to an integer.","title":"IntField Objects"},{"location":"api_reference/drf_fields/#floatfield-objects","text":"class FloatField(Field) A Field that converts the value to a float.","title":"FloatField Objects"},{"location":"api_reference/drf_fields/#boolfield-objects","text":"class BoolField(Field) A Field that converts the value to a boolean.","title":"BoolField Objects"},{"location":"api_reference/drf_fields/#methodfield-objects","text":"class MethodField(Field) A Field that calls a method on the Serializer . This is useful if a Field needs to serialize a value that may come from multiple attributes on an object. For example: :: class FooSerializer(Serializer): plus = MethodField() minus = MethodField('do_minus') def get_plus(self, foo_obj) -> int: return foo_obj.bar + foo_obj.baz def do_minus(self, foo_obj) -> int: return foo_obj.bar - foo_obj.baz foo = Foo(bar=5, baz=10) FooSerializer(foo).data # {'plus': 15, 'minus': -5} Arguments : method ( str ): The method on the serializer to call. Defaults to 'get_<field name>' .","title":"MethodField Objects"},{"location":"api_reference/drf_fields/#imagefield-objects","text":"class ImageField(Field) A Field that converts the value to a image url.","title":"ImageField Objects"},{"location":"api_reference/drf_fields/#listfield-objects","text":"class ListField(Field)","title":"ListField Objects"},{"location":"api_reference/drf_fields/#to_value_1","text":"def to_value(value: List[Union[Type[Any], bool, str, float, int]]) -> List[Union[str, int, bool, float]] Arguments : value ( list ): List of self.field_attrs or list of primitive types","title":"to_value"},{"location":"api_reference/drf_fields/#datefield-objects","text":"class DateField(Field) A Field that converts the value to a date format.","title":"DateField Objects"},{"location":"api_reference/drf_fields/#datetimefield-objects","text":"class DateTimeField(DateField) A Field that converts the value to a date time format.","title":"DateTimeField Objects"},{"location":"api_reference/drf_serializers/","text":"drf_serpy.Serializer drf_serpy.Serializer Serializer Objects default_getter data to_schema DictSerializer Objects Serializer Objects class Serializer(SerializerBase, metaclass=SerializerMeta) Serializer` is used as a base for custom serializers. The Serializer class is also a subclass of Field , and can be used as a Field to create nested schemas. A serializer is defined by subclassing Serializer and adding each Field as a class variable: Example: class FooSerializer(Serializer): foo = Field() bar = Field() foo = Foo(foo='hello', bar=5) FooSerializer(foo).data # {'foo': 'hello', 'bar': 5} Arguments : instance : The object or objects to serialize. many ( bool ): If instance is a collection of objects, set many to True to serialize to a list. context ( dict ): Currently unused parameter for compatability with Django REST Framework serializers. you can manually pass the context in and use it on the functions like as a runtime attribute default_getter The default getter used if :meth: Field.as_getter returns None. data @property def data() -> Dict Get the serialized data from the Serializer . The data will be cached for future accesses. to_schema @classmethod def to_schema(cls: SerializerMeta, many: bool = False, *args, **kwargs) -> openapi.Response: Convert Serializer to openapi.Schema DictSerializer Objects class DictSerializer(Serializer) DictSerializer serializes python dicts instead of objects. Instead of the serializer's fields fetching data using operator.attrgetter , DictSerializer uses operator.itemgetter . Example: class FooSerializer(DictSerializer): foo = IntField() bar = FloatField() foo = {'foo': '5', 'bar': '2.2'} FooSerializer(foo).data # {'foo': 5, 'bar': 2.2}","title":"drf_serpy.Serializer"},{"location":"api_reference/drf_serializers/#drf_serpyserializer","text":"drf_serpy.Serializer Serializer Objects default_getter data to_schema DictSerializer Objects","title":"drf_serpy.Serializer"},{"location":"api_reference/drf_serializers/#serializer-objects","text":"class Serializer(SerializerBase, metaclass=SerializerMeta) Serializer` is used as a base for custom serializers. The Serializer class is also a subclass of Field , and can be used as a Field to create nested schemas. A serializer is defined by subclassing Serializer and adding each Field as a class variable: Example: class FooSerializer(Serializer): foo = Field() bar = Field() foo = Foo(foo='hello', bar=5) FooSerializer(foo).data # {'foo': 'hello', 'bar': 5} Arguments : instance : The object or objects to serialize. many ( bool ): If instance is a collection of objects, set many to True to serialize to a list. context ( dict ): Currently unused parameter for compatability with Django REST Framework serializers. you can manually pass the context in and use it on the functions like as a runtime attribute","title":"Serializer Objects"},{"location":"api_reference/drf_serializers/#default_getter","text":"The default getter used if :meth: Field.as_getter returns None.","title":"default_getter"},{"location":"api_reference/drf_serializers/#data","text":"@property def data() -> Dict Get the serialized data from the Serializer . The data will be cached for future accesses.","title":"data"},{"location":"api_reference/drf_serializers/#to_schema","text":"@classmethod def to_schema(cls: SerializerMeta, many: bool = False, *args, **kwargs) -> openapi.Response: Convert Serializer to openapi.Schema","title":"to_schema"},{"location":"api_reference/drf_serializers/#dictserializer-objects","text":"class DictSerializer(Serializer) DictSerializer serializes python dicts instead of objects. Instead of the serializer's fields fetching data using operator.attrgetter , DictSerializer uses operator.itemgetter . Example: class FooSerializer(DictSerializer): foo = IntField() bar = FloatField() foo = {'foo': '5', 'bar': '2.2'} FooSerializer(foo).data # {'foo': 5, 'bar': 2.2}","title":"DictSerializer Objects"}]}